---
description: Follow best practices for pages, routing, and navigation in Nuxt
globs: **/pages/**/*.{vue,ts}
alwaysApply: false
---

# Nuxt Pages and Routing

## Context
Rules for creating pages and handling routing in Nuxt.
- Pages are auto-registered from pages/ directory
- Dynamic routes use [param] syntax
- Nested routes follow directory structure
- Index pages render at directory root
- Catch-all routes use [...slug] syntax

## Requirements
- Use proper file-based routing structure
- Implement proper page meta with definePageMeta
- Handle dynamic route parameters properly
- Use proper navigation guards
- Implement proper SEO meta tags
- Handle page transitions
- Implement proper loading states
- Use proper error handling
- Handle route validation
- Implement middleware when needed

## Examples
<example>
// Example of proper catch-all route handling with meta tags
export default `
<script setup lang="ts">
const route = useRoute()
const slug = route.params.slug

// Handle catch-all route
const path = Array.isArray(slug) ? slug.join('/') : slug

// Fetch blog post
const { data: post } = await useFetch(\`/api/blog/\${path}\`)

// Update meta tags
useHead({
  title: post.value?.title,
  meta: [
    {
      name: 'description',
      content: post.value?.description
    }
  ]
})
</script>

<template>
  <article>
    <BlogPost :post="post" />
  </article>
</template>
`

</example>

<example>
// Example of proper dynamic route handling with validation and error handling
export default `
<script setup lang="ts">
// Get route params
const route = useRoute()
const id = route.params.id

// Validate route params
if (!id || Array.isArray(id)) {
  throw createError({
    statusCode: 400,
    message: 'Invalid user ID'
  })
}

// Define page meta
definePageMeta({
  validate: async (route) => {
    // Validate user exists
    const user = await fetchUser(route.params.id)
    return !!user
  }
})

// Fetch user data
const { data: user } = await useFetch(\`/api/users/\${id}\`, {
  // Handle 404
  error: (error) => {
    if (error.statusCode === 404) {
      throw createError({
        statusCode: 404,
        message: \`User \${id} not found\`
      })
    }
  }
})
</script>

<template>
  <div>
    <h1>User Profile</h1>
    <UserProfile :user="user" />
  </div>
</template>
`

</example>

<example>
// Example of a well-structured index page with proper meta, SEO, and data fetching
export default `
<script setup lang="ts">
// Define page metadata
definePageMeta({
  title: 'Home',
  description: 'Welcome to our app',
  middleware: ['auth']
})

// Handle page-specific SEO
useSeoMeta({
  title: 'Home - My App',
  description: 'Welcome to my awesome app',
  ogImage: '/images/home-og.jpg'
})

// Fetch page data
const { data, pending } = await useFetch('/api/featured')
</script>

<template>
  <div>
    <h1>Welcome</h1>
    
    <!-- Loading state -->
    <LoadingSpinner v-if="pending" />
    
    <!-- Content -->
    <FeaturedContent v-else :items="data" />
  </div>
</template>
`

</example>

<example type="invalid">
// Example of missing meta and SEO tags
export default `
<script setup>
// Wrong: No page meta or SEO tags
const { data } = await useFetch('/api/page')
</script>
`

</example>

<example type="invalid">
// Example of incorrect routing approach not using Nuxt's file-based routing
export default `
<script>
export default {
  // Wrong: Using Vue Router directly
  router: {
    routes: [
      { path: '/users/:id', component: UserPage }
    ]
  }
}
</script>
`

</example>

<example type="invalid">
// Example of poor route parameter handling without validation
export default `
<script setup>
// Wrong: Not validating params
const id = useRoute().params.id
const data = await $fetch(\`/api/users/\${id}\`)
</script>
`

</example>


## Critical Rules
- ALWAYS use file-based routing structure
- Implement proper page meta and SEO tags
- Handle route parameters safely
- Use proper navigation and middleware
- Implement proper error handling
- Handle loading states properly
