{
  "enabled": true,
  "name": "Nuxt Error Handling",
  "description": "Follow best practices for error handling and logging in Nuxt applications",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "**/server/**/*.ts",
      "**/server/**/*.js"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Review the modified server-side code and ensure it follows Nuxt error handling best practices:\n\n1. **Error Pages**: Verify proper error.vue implementation for global error handling\n2. **Server Errors**: Check that createError is used for server-side errors with appropriate status codes and messages\n3. **Async Operations**: Ensure try/catch blocks are implemented for async operations\n4. **Error Boundaries**: Verify proper error boundary implementation\n5. **Error Logging**: Check for proper error logging with meaningful context\n6. **Network Errors**: Ensure network errors are handled gracefully\n7. **Retry Mechanisms**: Verify retry logic is implemented where appropriate\n8. **User-Friendly Messages**: Ensure error messages are user-friendly and not exposing sensitive information\n9. **Validation Errors**: Check that validation errors are handled properly\n10. **Error Recovery**: Verify proper error recovery mechanisms are in place\n\nFocus on:\n- Using createError() for server-side errors instead of generic throws\n- Implementing proper try/catch for async operations\n- Adding meaningful error logging with context\n- Ensuring user-friendly error messages\n- Handling all error states in the UI\n- Implementing proper error boundaries\n- Adding retry mechanisms where appropriate\n\nProvide specific suggestions for improvements and highlight any violations of Nuxt error handling best practices."
  }
}