{
  "enabled": true,
  "name": "Nuxt Hydration Best Practices",
  "description": "Reviews Vue components in Nuxt applications to ensure proper hydration practices, consistent server/client state, proper use of ClientOnly, and correct list rendering with keys",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "**/*.vue"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Review this Vue component for Nuxt hydration best practices. Check for:\n\n1. **Consistent State**: Ensure server and client render the same content initially\n   - Use Nuxt's data fetching utilities (useFetch, useAsyncData) instead of client-only fetching\n   - Avoid computed properties that produce different results on server vs client\n   - Ensure shared utility functions work identically on both sides\n\n2. **ClientOnly Usage**: Verify ClientOnly is used appropriately\n   - Should only wrap components that truly cannot work with SSR (third-party widgets, browser-specific features)\n   - Should NOT wrap entire app sections or critical content\n   - Must include fallback templates for better UX\n\n3. **List Rendering**: Check v-for implementations\n   - Must use unique, stable keys (preferably IDs, not array indices)\n   - Keys should remain consistent across re-renders and reordering\n   - Avoid using array index as key when items can be added/removed/reordered\n\n4. **DOM Manipulation**: Ensure proper timing for DOM access\n   - Use Vue refs instead of direct DOM queries\n   - Wait for onMounted before DOM manipulation\n   - Avoid modifying DOM before hydration completes\n\n5. **Data Fetching**: Verify proper SSR data patterns\n   - Use Nuxt's composables for data that should be available on both server and client\n   - Avoid onMounted for critical data fetching\n   - Handle loading and error states consistently\n\nProvide specific feedback on any violations found and suggest corrections following the established patterns. Focus on preventing hydration mismatches and ensuring smooth SSR/client transitions."
  }
}