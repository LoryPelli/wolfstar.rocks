{
  "enabled": true,
  "name": "Vue Component Best Practices",
  "description": "Enforces Vue component best practices in Nuxt application including TypeScript interfaces, proper structure, and composition API usage",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "**/components/**/*.vue"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Review this Vue component file and ensure it follows these best practices:\n\n## Requirements\n- Create small, focused components\n- Use defineModel for two-way binding\n- Use props for data down, emits for events up\n- Use composables for shared state/logic\n- Structure: script → template → style\n- Use TypeScript interfaces for props/emits\n- Define complex types in /types directory\n- Mark optional props with ? symbol\n\n## Examples\n\n<example>\n\n<script setup lang=\"ts\">\n\nconst props = defineProps<{\n\n  fetchUrl: string\n\n}>()\n\n// Handle async data fetching with error states\n\nconst { data, error, pending, refresh } = await useFetch(\n\n  props.fetchUrl,\n\n  {\n\n    // Handle errors\n\n    onRequestError: ({ error }) => {\n\n      console.error('Request failed:', error)\n\n    },\n\n    // Retry failed requests\n\n    retry: 3,\n\n    retryDelay: 1000\n\n  }\n\n)\n\n// Show error toast on failure\n\nwatch(error, (newError) => {\n\n  if (newError) {\n\n    useToast().error({\n\n      title: 'Error',\n\n      message: newError.message\n\n    })\n\n  }\n\n})\n\n</script>\n\n<template>\n\n  <div>\n\n    <!-- Loading state -->\n\n    <LoadingSpinner v-if=\"pending\" />\n\n    \n\n    <!-- Error state with retry -->\n\n    <div v-else-if=\"error\" class=\"error-state\">\n\n      <p>{{ error.message }}</p>\n\n      <button @click=\"refresh\">\n\n        Try Again\n\n      </button>\n\n    </div>\n\n    \n\n    <!-- Success state -->\n\n    <div v-else>\n\n      <slot :data=\"data\" />\n\n    </div>\n\n  </div>\n\n</template> \n\n</example>\n\n<example>\n\n<script setup lang=\"ts\">\n\ninterface CardProps {\n\n  title: string;\n\n  description: string;\n\n  image?: string;\n\n}\n\nconst props = defineProps<CardProps>()\n\nconst emit = defineEmits<{\n\n  click: [event: MouseEvent]\n\n}>()\n\nfunction handleClick(event: MouseEvent) {\n\n  emit('click', event)\n\n}\n\n</script>\n\n<template>\n\n  <div @click=\"handleClick\">\n\n    <h2>{{ title }}</h2>\n\n    <p>{{ description }}</p>\n\n    <img v-if=\"image\" :src=\"image\" alt=\"Card image\">\n\n  </div>\n\n</template>\n\n<style scoped>\n\n.card {\n\n  padding: 1rem;\n\n  border-radius: 0.5rem;\n\n  background: white;\n\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n\n}\n\nh2 {\n\n  margin: 0 0 0.5rem;\n\n  font-size: 1.25rem;\n\n}\n\nimg {\n\n  width: 100%;\n\n  height: auto;\n\n  border-radius: 0.25rem;\n\n}\n\n</style> \n\n</example>\n\n<example>\n\n<script setup lang=\"ts\">\n\nconst props = defineProps<{\n\n  error: {\n\n    statusCode: number\n\n    statusMessage?: string\n\n    message?: string\n\n  }\n\n}>()\n\n// Handle error page head\n\nuseHead({\n\n  title: `Error ${props.error.statusCode}`\n\n})\n\n// Clear error and return to homepage\n\nfunction handleError() {\n\n  clearError()\n\n  navigateTo('/')\n\n}\n\n</script>\n\n<template>\n\n  <div class=\"error-page\">\n\n    <h1>{{ error.statusCode }}</h1>\n\n    <div class=\"error-details\">\n\n      <p>{{ error.statusMessage || error.message }}</p>\n\n      <button @click=\"handleError\">\n\n        Return Home\n\n      </button>\n\n    </div>\n\n  </div>\n\n</template> \n\n</example>\n\n<example type=\"invalid\">\n\n<!-- ❌ WRONG: Not using TypeScript or script setup -->\n\n<!-- This example shows incorrect usage of Vue components -->\n\n<script>\n\nexport default {\n\n  props: ['title', 'description'], // Wrong: No types\n\n  methods: {\n\n    handleClick() {\n\n      this.$emit('click') // Wrong: No event type\n\n    }\n\n  }\n\n}\n\n</script>\n\n<template>\n\n  <div @click=\"$emit('click', $event)\">\n\n    <h2>{{ title }}</h2>\n\n    <p>{{ description }}</p>\n\n  </div>\n\n</template>\n\n<style>\n\n/* Wrong: Not using scoped styles */\n\nh2 {\n\n  margin-bottom: 10px;\n\n}\n\n</style> \n\n</example>\n\n## Critical Rules\n- ALWAYS use TypeScript interfaces for props/emits\n- Keep components small and focused\n- Use proper component structure (script → template → style)\n- Use scoped styles\n\nPlease check the component and provide specific feedback on any violations of these practices, along with corrected code examples."
  }
}