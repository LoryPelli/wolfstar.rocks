{
  "enabled": true,
  "name": "Nuxt Store Management",
  "description": "Follow best practices for state management using Pinia in Nuxt applications",
  "version": "1",
  "when": {
    "type": "fileEdited",
    "patterns": [
      "**/stores/**/*.ts",
      "**/stores/**/*.js"
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "Review the store files for Nuxt/Pinia best practices. Ensure:\n\n1. **Pinia Store Structure**: Uses `defineStore` with proper state, getters, and actions\n2. **TypeScript Types**: Proper interfaces for state, return types, and parameters\n3. **Async Operations**: Proper handling with try/catch, loading states, and error handling\n4. **State Management**: No direct mutations, proper reactive updates\n5. **SSR Compatibility**: Handles server-side rendering properly\n6. **Error Handling**: Uses `createError` for proper error responses\n7. **Naming Conventions**: Store names use camelCase, composable pattern with `use` prefix\n8. **Store Modules**: Proper separation of concerns and modular structure\n\nCheck against these requirements:\n- Use Pinia for state management\n- Implement proper TypeScript types\n- Use proper store structure (state, getters, actions)\n- Handle async operations properly\n- Implement proper error handling\n- Use proper naming conventions\n- Avoid direct state mutations\n- Implement proper store modules\n- Use composables when appropriate\n- Handle SSR properly\n\nProvide specific feedback on any violations and suggest corrections following the established patterns."
  }
}